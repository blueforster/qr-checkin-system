請用 Node.js + TypeScript 實作一個可在本機或雲端部署的 QR Code 報到系統，具備下列完整功能、檔案結構、設定、與測試腳本。請產出可直接執行的程式碼、README、與 .env.sample。

1) 需求總覽
讀入主辦方提供的 CSV 報名名單（UTF-8，含標頭）。

依 email 產生 個人化 QR Code（PNG 或內嵌於信件），並用 郵件範本 寄給每位報名者。

活動當天，工作人員以一般 QR 掃描器掃描參加者 QR，或開啟內建相機掃碼頁。

驗證成功後，即時寫入 Google Sheet（去重/冪等），並在手機上顯示「姓名 + 報到成功」頁面。

強化安全（JWT 簽章、到期）、錯誤處理、日誌、觀測性。

2) 技術與套件
後端：Node.js 18+、TypeScript、Express

Email：Nodemailer（SMTP；README 提供 Gmail OAuth 指南）

QR 產生：qrcode

Token：JWT (HS256)；payload 含 eventId, email, nonce, exp

資料：Google Sheets API v4（服務帳號）；本地 sqlite 或 jsonl 備援（可開關）

前端：管理頁（上傳/寄送/重寄/匯出）與掃碼頁（可選用相機掃碼 @zxing/browser）

3) CSV 與 Email 規格
CSV 欄位（範例）：name,email,company,title（允許額外欄位，需容錯）

Email 模板（templates/email.html）：可插入變數 {{name}}, {{email}}, {{eventName}}, {{checkinUrl}}, {{qrDataUri}}

個人化連結：https://<domain>/checkin?token=<JWT>（內文按鈕 + 內嵌 QR）

寄送：節流（預設每秒3封）、重試、錯誤日誌；.env 切換內嵌 QR vs 附件 PNG

4) JWT / 安全
claims：eventId, email, nonce, exp（預設活動日 + 3 天，.env 可調）

簽章：HS256（.env JWT_SECRET）

驗證：驗簽 → 比對 eventId → 檢查 exp → 查重（是否已報到）

防重複：以 (eventId, email) 原子 upsert（或用 sqlite transaction）

5) Google Sheets 寫入
使用服務帳號（JSON），開啟 Sheets API，並將試算表分享給服務帳號信箱

.env：GOOGLE_SHEETS_ID, GOOGLE_SHEETS_TAB

欄位：timestamp,eventId,email,name,company,title,nonce,status

Upsert key：(eventId, email)；狀態為 checked_in；重複報到時更新 timestamp

6) 專案結構
/qr-checkin
  ├─ src/
  │   ├─ server.ts
  │   ├─ routes/
  │   │   ├─ admin.ts           # 上傳CSV、預覽、批次寄信、重寄、匯出
  │   │   └─ checkin.ts         # /checkin 驗證、寫Sheet、回應手機頁
  │   ├─ services/
  │   │   ├─ mailer.ts
  │   │   ├─ qr.ts
  │   │   ├─ token.ts
  │   │   ├─ sheets.ts
  │   │   └─ storage.ts
  │   ├─ utils/csv.ts
  │   ├─ public/
  │   │   ├─ admin.html
  │   │   ├─ admin.js
  │   │   ├─ scan.html          # 相機掃碼頁（可選）
  │   │   ├─ checkin-success.html # ✅ 成功頁模板（會以變數填值）
  │   │   └─ checkin-fail.html    # ❌ 失敗/過期頁模板
  │   └─ types.ts
  ├─ templates/email.html
  ├─ creds/service-account.json  # .gitignore
  ├─ .env.sample
  ├─ package.json
  ├─ tsconfig.json
  ├─ README.md
  └─ docker-compose.yml
7) API 與流程
7.1 上傳名單
POST /admin/upload-csv（multipart/form-data → file）

回傳：欄位檢查、總筆數、前20筆預覽

7.2 批次寄信
POST /admin/send-batch

參數：eventName, subject, from, testMode（true 只寄前3筆）, attachPng（true 附件、false 內嵌）

流程：逐筆 產JWT→產QR→渲染信→寄送→記錄結果

7.3 個人補寄
POST /admin/resend-one（email）

7.4 報到（通用模式：任何掃碼器）
掃描個人 QR → 開啟 GET /checkin?token=...

後端流程：驗簽 → 查重 upsert 到 Google Sheet → 回傳成功/已報到/失敗頁（手機友好）

7.5 報到（相機掃碼模式，備選）
GET /scan.html 開啟相機 → 前端解碼 → 自動導向 /checkin?token=...

8) 🔑 掃碼後手機頁面（顯示姓名 + 報到成功）
請 實作與套用下列前端模板（置於 public/），後端 checkin.ts 在驗證與寫入成功後，將變數帶入模板並回傳：

8.1 成功頁模板：public/checkin-success.html
手機優先（字大、置中、留白足夠；使用系統字體 + 簡單 CSS）

需顯示：

H1：{{name}}（大字）

H2：報到成功！（或「你已完成報到」）

時間：{{timestamp}}（YYYY-MM-DD HH:mm:ss，使用伺服器時區）

可選欄位：{{company}}, {{title}}

視覺提示：✅ 圖示或綠色強調

若此人已報到過（查到既有紀錄），同樣顯示姓名，將主訊息改為：

H2：已完成報到，並在下方加註「首次報到時間：{{firstCheckinAt}}，本次掃碼：{{timestamp}}」

8.2 失敗頁模板：public/checkin-fail.html
手機優先、置中

需顯示：

H2：驗證失敗或 QR 已過期

說明文：「請洽服務台協助」

視覺提示：❌ 圖示或紅色強調

8.3 後端回傳頁面規格
GET /checkin?token=... 邏輯：

解析並驗證 JWT（簽章、exp、eventId）

以 (eventId, email) upsert 寫入 Google Sheet（狀態 checked_in）

組裝模板變數：name,email,company,title,timestamp,firstCheckinAt

成功：渲染 checkin-success.html（若已報到過則顯示「已完成報到」版面）

失敗：渲染 checkin-fail.html

模板可用簡單占位符（{{var}}）或伺服端渲染（ejs/handlebars），但請產生純靜態模板檔並在後端以字串替換注入變數，避免額外依賴

9) .env.sample
PORT=8080
BASE_URL=http://localhost:8080
EVENT_ID=tm-2025-09-20
EVENT_NAME=AI Orators Monthly Meeting
JWT_SECRET=please-change-me
JWT_TTL_HOURS=240

SMTP_HOST=smtp.gmail.com
SMTP_PORT=465
SMTP_SECURE=true
SMTP_USER=your_account@gmail.com
SMTP_PASS=your_app_password

FROM_DISPLAY=AI Orators
FROM_EMAIL=your_account@gmail.com
MAIL_SUBJECT=[{{eventName}}] 你的專屬入場QR碼

GOOGLE_SHEETS_ID=xxxxx_your_sheet_id_xxxxx
GOOGLE_SHEETS_TAB=checkins

LOCAL_PERSISTENCE=sqlite     # sqlite | jsonl | none
ATTACH_QR_PNG=false
RATE_LIMIT_PER_SEC=3
ADMIN_PASS=change-me
10) Email 範本（templates/email.html）
內含按鈕連到 {{checkinUrl}}，並以 <img src="{{qrDataUri}}"> 內嵌 QR（.env 可切換為附件）

文字包含活動名稱、日期地點、注意事項與客服信箱

11) 管理頁
public/admin.html + admin.js：上傳 CSV、預覽、批次寄送、個人補寄、匯出已報到名單

後台需基本密碼保護（.env ADMIN_PASS，簡易 session）

12) 測試與腳本
npm run dev、npm run build、npm start

npm run send:test：testMode=true 寄前三封（含 QR 與個人化連結）

附 sample.csv 三筆假資料演示

README：Google 服務帳號設定、Gmail/SMTP/OAuth、部署（Railway/Render/Docker）、常見錯誤排除（權限/時區/限流/編碼）

13) 日誌與觀測性
pino/winston 記錄寄送成功率、check-in 成功/重複/失敗、Sheets 延遲

/healthz 與 /metrics（JSON）：今日報到數、重複報到數、寄信成功率

14) 安全與隱私
URL 不直曝 email（只用 JWT）

JWT 有效期可設定，過期導向 checkin-fail.html

機密用 .env；creds/ 加 .gitignore

CORS 僅允許管理頁來源

15) 進階（可選）
批次寄信可 resume（中斷續跑）

名單去重（同 email 多列警示）

多活動支援（多 EVENT_ID 或資料表分區）

報到完成時可選擇同時寄發「到場確認信」

產出後請附上完整程式碼與 README，確保 npm i → 依 README 步驟即可本機跑起 demo（上傳 sample.csv、寄測試信、掃描與寫入 Google Sheet，並在手機上顯示「姓名 + 報到成功」頁面）。